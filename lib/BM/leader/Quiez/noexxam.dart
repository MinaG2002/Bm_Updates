import 'package:bmproject/BM/Login/controller/login_control.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';

class Noexxam extends StatefulWidget {
  final String quiez;
  const Noexxam({super.key, required this.quiez});

  @override
  State<Noexxam> createState() => _NoexxamState();
}

class _NoexxamState extends State<Noexxam> {
  bool isLoading = true;
  List<Map<String, dynamic>> unexaminedData = [];

  @override
  void initState() {
    super.initState();
    fetchUnexaminedStudents();
  }

  Future<void> fetchUnexaminedStudents() async {
    final userProvider = Provider.of<UserProvider>(context, listen: false);

    final String? leader = userProvider.userleader;
    try {
      // âœ… 1. Ø¬Ù„Ø¨ Ø¬Ù…ÙŠØ¹ Ø§Ù„Ø§Ù…ØªØ­Ø§Ù†Ø§Øª Ø§Ù„Ù…Ø±ØªØ¨Ø·Ø© Ø¨Ø§Ù„Ù„ÙŠØ¯Ø±
      final allQuizNames = [widget.quiez];

      // âœ… 2. Ø¬Ù„Ø¨ ÙƒÙ„ Ø§Ù„Ø·Ù„Ø§Ø¨ Ø§Ù„Ù…Ø±ØªØ¨Ø·ÙŠÙ† Ø¨Ø§Ù„Ù„ÙŠØ¯Ø±
      final usersSnapshot = await FirebaseFirestore.instance
          .collection('users')
          .where('Leader', isEqualTo: leader)
          .get();

      final users = usersSnapshot.docs.map((doc) => doc.data()).toList();

      // âœ… 3. Ø¬Ù„Ø¨ Ù†ØªØ§Ø¦Ø¬ Ø§Ù„Ø·Ù„Ø§Ø¨
      final scoresSnapshot = await FirebaseFirestore.instance
          .collection('scores')
          .where('Leader', isEqualTo: leader)
          .where('Quiz', isEqualTo: widget.quiez)
          .get();

      // Ø¥Ø¹Ø¯Ø§Ø¯ Ø®Ø±ÙŠØ·Ø©: {cisco: [quiz1, quiz2]}
      final Map<String, List<String>> userScores = {};
      for (var doc in scoresSnapshot.docs) {
        final data = doc.data();
        final cisco = data['cisco']?.toString();
        final quiz = data['Quiz']?.toString();
        if (cisco != null && quiz != null) {
          userScores.putIfAbsent(cisco, () => []).add(quiz);
        }
      }

      // âœ… 4. Ù„ÙƒÙ„ Ø·Ø§Ù„Ø¨: Ù†Ø­Ø³Ø¨ Ø§Ù„Ø§Ù…ØªØ­Ø§Ù†Ø§Øª Ø§Ù„ØªÙŠ Ù„Ù… ÙŠÙ…ØªØ­Ù†Ù‡Ø§
      final result = users
          .map((user) {
            final cisco = user['cisco']?.toString();
            final name = user['username'] ?? 'Ø¨Ø¯ÙˆÙ† Ø§Ø³Ù…';
            final doneQuizzes = userScores[cisco] ?? [];
            final missingQuizzes = allQuizNames
                .where((quizName) => !doneQuizzes.contains(quizName))
                .toList();

            return {
              'name': name,
              'cisco': cisco,
              'missingQuizzes': missingQuizzes,
            };
          })
          .where((e) => e['missingQuizzes'].isNotEmpty)
          .toList();

      setState(() {
        unexaminedData = result;
        isLoading = false;
      });
    } catch (e) {
      print("Error: $e");
      setState(() {
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: isLoading
          ? Center(child: CircularProgressIndicator())
          : unexaminedData.isEmpty
          ? Center(child: Text("ðŸŽ‰ ÙƒÙ„ Ø§Ù„Ø·Ù„Ø§Ø¨ Ø£ÙƒÙ…Ù„ÙˆØ§ Ø§Ù„Ø§Ù…ØªØ­Ø§Ù†Ø§Øª"))
          : ListView.builder(
              itemCount: unexaminedData.length,
              itemBuilder: (context, index) {
                final user = unexaminedData[index];
                return Card(
                  margin: EdgeInsets.all(10),
                  child: ListTile(
                    title: Text("ðŸ‘¤ ${user['name']}"),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("ðŸ†” Cisco: ${user['cisco']}"),
                        SizedBox(height: 5),
                        Text(
                          "ðŸš« Ù„Ù… ÙŠÙ…ØªØ­Ù†: ${user['missingQuizzes'].join(', ')}",
                          style: TextStyle(color: Colors.red),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
    );
  }
}
